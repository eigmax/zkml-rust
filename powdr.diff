diff --git a/backend/src/pilstark/estark.rs b/backend/src/pilstark/estark.rs
index 6fa8878..e223f41 100644
--- a/backend/src/pilstark/estark.rs
+++ b/backend/src/pilstark/estark.rs
@@ -1,7 +1,9 @@
 use crate::{pilstark, BackendImpl};
 use ast::analyzed::Analyzed;
 use number::{BigInt, DegreeType, FieldElement, GoldilocksField};
-
+use starky::pil2circom;
+use std::fs::File;
+use std::io::Write;
 use starky::{
     merklehash::MerkleTreeGL,
     polsarray::{PolKind, PolsArray},
@@ -105,7 +107,7 @@ impl<F: FieldElement> BackendImpl<F> for EStark {
         )
         .unwrap();
 
-        let starkproof = StarkProof::<MerkleTreeGL>::stark_gen::<TranscriptGL>(
+        let mut starkproof = StarkProof::<MerkleTreeGL>::stark_gen::<TranscriptGL>(
             &cm_pols,
             &const_pols,
             &setup.const_tree,
@@ -125,6 +127,37 @@ impl<F: FieldElement> BackendImpl<F> for EStark {
         )
         .unwrap());
 
+         println!("generate circom");
+         let norm_stage = true;
+         let opt = pil2circom::StarkOption {
+                enable_input: false,
+                verkey_input: norm_stage,
+                skip_main: false,
+                agg_stage: false,
+            };
+            let str_ver = pil2circom::pil2circom(
+                &pil,
+                &setup.const_root,
+                &self.params,
+                &mut setup.starkinfo,
+                &mut setup.program,
+                &opt,
+            ).unwrap();
+            let circom_file = "/tmp/abc.circom".to_string();
+            let zkin = "/tmp/abc.zkin.json".to_string();
+            let mut file = File::create(&circom_file).unwrap();
+            write!(file, "{}", str_ver).unwrap();
+            println!("generate circom done");
+
+            if !norm_stage {
+                starkproof.rootC = None;
+            }
+
+            let input = serde_json::to_string(&starkproof).unwrap();
+            let mut file = File::create(&zkin).unwrap();
+            write!(file, "{}", input).unwrap();
+            println!("generate zkin done");
+
         (
             Some(serde_json::to_vec(&starkproof).unwrap()),
             Some(serde_json::to_string(&pil).unwrap()),
